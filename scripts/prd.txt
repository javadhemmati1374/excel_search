## ۱. خلاصه پروژه

این پروژه یک سیستم وب تک‌کاربره برای آپلود فایل‌های اکسل حاوی اطلاعات تماس، ذخیره‌سازی آن‌ها در دیتابیس PostgreSQL (با قابلیت مدیریت میلیون‌ها رکورد) و جستجوی سریع شماره تلفن‌ها (TelNum) در داده‌های وارد شده است.

## ۲. اهداف پروژه

- مدیریت و جستجوی داده‌های وارد شده از اکسل به دیتابیس (به خصوص فیلد TelNum)
- پشتیبانی از حجم داده بالا (میلیون+ رکورد در جدول داده‌های تلفنی)
- رابط کاربری ساده برای آپلود فایل و جستجو
- امنیت پایه با احراز هویت تک کاربره

## ۳. تکنولوژی‌های مورد استفاده

- **Backend**: Node.js با Express.js
- **Frontend**: Next.js 15 با App Router
- **Database**: PostgreSQL
- **UI Framework**: Tailwind CSS, shadcn/ui
- **Authentication**: JWT + bcrypt
- **File Upload**: Multer
- **Excel Parsing**: XLSX

## ۴. ساختار دایرکتوری‌ها (تأیید شده)

`excel-search-manager/
├── backend/
│   ├── src/
│   │   ├── config/                 # تنظیمات دیتابیس و احراز هویت
│   │   ├── controllers/            # منطق اصلی کنترلرها (Auth, Upload, Search)
│   │   ├── models/                 # تعریف مدل‌های دیتابیس (User, File, PhoneData)
│   │   ├── routes/                 # تعریف مسیرهای API
│   │   ├── middleware/             # میدلورها (احراز هویت، آپلود)
│   │   ├── services/               # سرویس‌های پردازش داده (Excel Parser, Search Logic)
│   │   └── app.js                  # فایل اصلی سرور Express
│   ├── uploads/                    # محل ذخیره موقت/دائم فایل‌های آپلود شده
│   ├── package.json                # وابستگی‌های بک‌اند
│   └── .env                        # متغیرهای محیطی بک‌اند
├── frontend/
│   ├── app/                        # روت‌های Next.js (App Router)
│   │   ├── login/                  # صفحه ورود
│   │   ├── dashboard/              # صفحه اصلی داشبورد
│   │   ├── layout.tsx              # لایوت کلی اپلیکیشن
│   │   └── globals.css             # استایل‌های گلوبال Tailwind
│   ├── components/                 # کامپوننت‌های React
│   │   ├── ui/                     # کامپوننت‌های پایه shadcn/ui
│   │   ├── LoginForm.tsx           # فرم ورود کاربر
│   │   ├── FileUpload.tsx          # کامپوننت آپلود فایل
│   │   ├── SearchForm.tsx          # فرم جستجو
│   │   ├── DataTable.tsx           # نمایش نتایج جستجو در جدول
│   │   └── FileManager.tsx         # لیست و مدیریت فایل‌های آپلود شده
│   ├── lib/                        # توابع کمکی و منطق سمت کلاینت
│   │   ├── api.ts                  # توابع برای تماس با API
│   │   ├── auth.ts                 # مدیریت توکن و وضعیت احراز هویت
│   │   └── utils.ts                # توابع عمومی
│   ├── types/                      # تعریف Typeهای TypeScript
│   ├── next.config.js              # تنظیمات Next.js
│   ├── package.json                # وابستگی‌های فرانت‌اند
│   └── .env.local                  # متغیرهای محیطی فرانت‌اند
└── database/
    ├── init.sql                    # اسکریپت ایجاد جداول دیتابیس
    ├── indexes.sql                 # اسکریپت ایجاد ایندکس‌ها
    └── sample_data.sql             # (اختیاری) داده‌های نمونه برای تست`

## ۵. مدل‌های دیتابیس و Schema

دیتابیس PostgreSQL شامل سه جدول اصلی خواهد بود:

1. **users**: برای احراز هویت تک کاربره
    - id (SERIAL PRIMARY KEY)
    - username (VARCHAR UNIQUE NOT NULL)
    - password_hash (VARCHAR NOT NULL)
2. **files**: برای پیگیری فایل‌های آپلود شده
    - id (SERIAL PRIMARY KEY)
    - filename (VARCHAR NOT NULL)
    - upload_date (TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP)
    - status (VARCHAR DEFAULT 'processing') # مثلا: 'uploaded', 'processing', 'completed', 'failed'
    - total_records (INTEGER DEFAULT 0) # تعداد رکوردهای موجود در فایل
    - processed_records (INTEGER DEFAULT 0) # تعداد رکوردهای پردازش شده
    - user_id (INTEGER REFERENCES users(id)) # اگر نیاز به ارتباط با کاربر آپلود کننده باشد
3. **phone_data**: برای ذخیره داده‌های اصلی از فایل اکسل
    - id (BIGSERIAL PRIMARY KEY) # استفاده از BIGSERIAL برای پشتیبانی از تعداد زیاد رکورد
    - file_id (INTEGER REFERENCES files(id) ON DELETE CASCADE) # کلید خارجی برای ارتباط با فایل اصلی (اگر فایل حذف شود، رکوردهای مرتبط هم حذف شوند)
    - reg_province (VARCHAR)
    - reg_city (VARCHAR)
    - address (VARCHAR)
    - city (VARCHAR) # معادل ستون "City" در اکسل
    - parent_classification_name(VARCHAR) # معادل ستون "Parent" در اکسل
    - classification_name(VARCHAR) # معادل ستون "Classifica" در اکسل
    - custom_title (VARCHAR) # معادل ستون "CustomTitle" در اکسل
    - tel_num (VARCHAR NOT NULL) # معادل ستون "TelNum" در اکسل - برای جستجو استفاده می‌شود

**Mapping از نام ستون‌های فارسی اکسل به نام ستون‌های دیتابیس:**

| **نام ستون در اکسل** | **نام ستون در دیتابیس** | **توضیحات** |
| --- | --- | --- |
| RegProvince | reg_province | استان |
| RegCity | reg_city | شهر |
| Address | address | آدرس |
| City | city | شهر محل فعالیت |
| ParentClassificationName | parent_classification_name | نام طبقه‌بندی والدین |
| ClassificationName | classification_name | طبقه‌بندی |
| CustomTitle | custom_title | عنوان سفارشی / نام کسب و کار / شخص |
| TelNum | tel_num | شماره تلفن (کلید اصلی جستجو) |

**ایندکس‌گذاری (Indexing):**

برای بهینه‌سازی جستجو روی فیلد tel_num، ایجاد ایندکس ضروری است. نوع ایندکس بستگی به نوع جستجو دارد:

- **B-tree Index**: برای جستجوی دقیق (=) و جستجوی پیشوندی (LIKE 'prefix%'). این نوع ایندکس استاندارد و برای فیلدهای متنی/عددی رایج است.
    
    `CREATE INDEX idx_phone_data_tel_num ON phone_data (tel_num);`
    

## ۶. بک‌اند (Node.js + Express)

- **وظایف اصلی**: ارائه API برای احراز هویت، دریافت فایل آپلود شده، پردازش فایل (parsing و ذخیره در DB)، و انجام جستجو در دیتابیس.
- **مدیریت آپلود**: استفاده از Multer برای دریافت فایل و XLSX برای خواندن محتوای آن. داده‌ها باید به صورت بهینه (Batch Inserts) وارد دیتابیس شوند تا عملکرد در حجم بالا مناسب باشد. وضعیت پردازش فایل باید در جدول files به‌روزرسانی شود.
- **جستجو**: پیاده‌سازی منطق جستجو در searchController و searchService. کوئری دیتابیس باید از ایندکس tel_num استفاده کند.

### API Endpoints (تأیید شده)

- POST /api/auth/login: ورود کاربر با username و password (دریافت JWT).
- POST /api/auth/logout: خروج کاربر (سمت کلاینت JWT حذف می‌شود، سمت سرور شاید نیاز به لیست سیاه نداشته باشد برای سادگی).
- GET /api/auth/verify: تأیید اعتبار توکن JWT فعلی.
- POST /api/upload: دریافت فایل اکسل. نیاز به میدلور auth و multer. پس از آپلود، فایل پردازش شده و داده‌ها وارد phone_data می‌شوند.
- GET /api/files: لیست فایل‌های آپلود شده (از جدول files). نیاز به میدلور auth.
- DELETE /api/files/:id: حذف یک فایل آپلود شده و تمام رکوردهای مرتبط در phone_data (با توجه به ON DELETE CASCADE). نیاز به میدلور auth.
- GET /api/search?tel_num=...: جستجو بر اساس شماره تلفن (tel_num). نیاز به میدلور auth. پارامتر tel_num اجباری است. نتایج باید شامل تمام ستون‌های رکورد پیدا شده باشند.
- GET /api/stats: (اختیاری، اما مفید) آمار کلی مانند تعداد کل رکوردها. نیاز به میدلور auth.

### Environment Variables (.env)

`DB_HOST=localhost
DB_PORT=5432
DB_NAME=excel_search_db
DB_USER=postgres
DB_PASSWORD=your_password_here
JWT_SECRET=your_very_secret_key_here
PORT=5000
UPLOAD_PATH=./uploads`

## ۷. فرانت‌اند (Next.js 15)

- **وظایف اصلی**: ارائه رابط کاربری، مدیریت وضعیت احراز هویت، ارسال درخواست‌ها به API بک‌اند، نمایش داده‌ها.
- **جریان کاربری**: کاربر ابتدا وارد صفحه /login می‌شود. پس از ورود موفق، به صفحه /dashboard هدایت می‌شود. در داشبورد، می‌تواند فایل جدید آپلود کند، لیست فایل‌های قبلی را ببیند و مدیریت کند، و در فیلد جستجو شماره تلفن وارد کرده و نتایج را ببیند.
- **کامپوننت‌ها**: استفاده از کامپوننت‌های پایه از shadcn/ui (مانند Button, Input, Table, Card) برای ساخت رابط کاربری تمیز.

### Environment Variables (.env.local)

`NEXT_PUBLIC_API_URL=http://localhost:5000
NEXT_PUBLIC_APP_NAME=Excel Search Manager`

## ۸. ملاحظات عملکرد

- **ایندکس روی tel_num**: حیاتی برای جستجوی سریع در حجم بالا.
- **Batch Inserts**: هنگام وارد کردن داده‌ها از اکسل به دیتابیس، استفاده از عملیات Bulk Insert یا Batch Insert در PostgreSQL به جای وارد کردن تک‌تک رکوردها.
- **بهینه‌سازی کوئری جستجو**: اطمینان از اینکه کوئری SELECT ... WHERE tel_num = ? یا tel_num LIKE ? به درستی از ایندکس استفاده می‌کند.

## ۹. ملاحظات امنیتی

- استفاده از HTTPS در محیط Production.
- اعتبارسنجی ورودی‌ها در بک‌اند (مانند شماره تلفن، نام فایل).
- جلوگیری از SQL Injection (استفاده از Prepared Statements یا ORMها).
- ذخیره پسورد کاربر به صورت هش شده (bcrypt).
- استفاده از JWT معتبر و محافظت شده (ذخیره در HttpOnly Cookies یا Local Storage امن - localStorage برای سادگی اولیه اوکی است اما HttpOnly Cookies امن‌تر است).

---

**دستورالعمل‌های گام به گام برای ساخت:**

لطفاً پروژه را طبق مراحل زیر پیش ببرید:

**مرحله ۱: راه‌اندازی پروژه و دیتابیس**

1. پوشه ریشه پروژه (excel-search-manager/) را ایجاد کنید.
2. پوشه‌های backend/, frontend/, database/ و زیرپوشه‌های مطابق ساختار دایرکتوری‌ها را ایجاد کنید.
3. **دیتابیس:**
    - اسکریپت database/init.sql را برای ایجاد جداول users, files, phone_data مطابق با schema تعریف شده در مستندات (بخش ۵) بنویسید.
    - اسکریپت database/indexes.sql را برای ایجاد ایندکس B-tree روی ستون tel_num در جدول phone_data بنویسید.
    - (اختیاری) یک کاربر اولیه در جدول users با پسورد هش شده برای تست ایجاد کنید (می‌توانید از ابزاری برای تولید هش bcrypt استفاده کنید).
4. **Backend:**
    - در پوشه backend/، فایل package.json را با وابستگی‌های لیست شده در مستندات ایجاد کنید.
    - فایل .env را مطابق نمونه در مستندات ایجاد کنید و از متغیرهای محیطی برای تنظیمات دیتابیس و JWT_SECRET استفاده کنید.
5. **Frontend:**
    - در پوشه frontend/، یک پروژه Next.js جدید (با TypeScript, App Router, Tailwind CSS) ایجاد کنید.
    - وابستگی‌های اضافی (axios, lucide-react) را نصب کنید.
    - فایل .env.local را مطابق نمونه در مستندات ایجاد کنید.

**مرحله ۲: پیاده‌سازی بک‌اند (Backend)**

1. در backend/src/config/database.js، منطق اتصال به دیتابیس PostgreSQL با استفاده از متغیرهای محیطی را پیاده‌سازی کنید.
2. در backend/src/models/، مدل‌های پایه‌ای برای ارتباط با جداول users, files, phone_data ایجاد کنید (می‌توانید از node-postgres مستقیماً یا یک ORM سبک استفاده کنید).
3. در backend/src/middleware/auth.js، میدلور احراز هویت JWT را پیاده‌سازی کنید.
4. در backend/src/controllers/authController.js و backend/src/routes/auth.js، منطق ورود و تأیید احراز هویت را پیاده‌سازی کنید.
5. در backend/src/middleware/multer.js، میدلور Multer را برای مدیریت آپلود فایل پیکربندی کنید.
6. در backend/src/services/excelParser.js، منطق خواندن فایل اکسل (.xlsx) با استفاده از کتابخانه xlsx و استخراج داده‌ها با mapping صحیح به نام ستون‌های دیتابیس را پیاده‌سازی کنید.
7. در backend/src/controllers/uploadController.js و backend/src/routes/upload.js، endpoint آپلود فایل را پیاده‌سازی کنید. این کنترلر باید:
    - فایل را دریافت کند.
    - رکورد جدید در جدول files با وضعیت 'processing' ایجاد کند.
    - داده‌ها را از فایل اکسل بخواند.
    - داده‌ها را به صورت Batch در جدول phone_data ذخیره کند، با ارجاع به file_id.
    - پس از اتمام، وضعیت فایل در جدول files را به 'completed' تغییر دهد.
    - خطاهای احتمالی را ثبت و مدیریت کند و وضعیت فایل را به 'failed' تغییر دهد.
8. در backend/src/services/searchService.js، منطق جستجو در دیتابیس بر روی ستون tel_num را پیاده‌سازی کنید. کوئری باید از ایندکس استفاده کند.
9. در backend/src/controllers/searchController.js و backend/src/routes/search.js، endpoint جستجو (/api/search) را پیاده‌سازی کنید.
10. در backend/src/app.js، سرور Express را تنظیم کنید، CORS را فعال کنید و مسیرها را mount کنید.

**مرحله ۳: پیاده‌سازی فرانت‌اند (Frontend)**

1. ساختار صفحات App Router (app/login/page.tsx, app/dashboard/page.tsx, app/layout.tsx) را ایجاد کنید.
2. کامپوننت‌های پایه UI از shadcn/ui را نصب و پیکربندی کنید (مطابق مستندات shadcn/ui).
3. در frontend/lib/api.ts، یک نمونه Axios برای تماس با API بک‌اند ایجاد کنید و URL پایه API را از متغیر محیطی (NEXT_PUBLIC_API_URL) بخوانید.
4. در frontend/lib/auth.ts، توابعی برای ذخیره و بازیابی توکن JWT در localStorage و بررسی وضعیت احراز هویت کاربر پیاده‌سازی کنید.
5. در app/login/page.tsx و components/LoginForm.tsx، صفحه و فرم ورود را پیاده‌سازی کنید. این فرم باید با API ورود بک‌اند (/api/auth/login) ارتباط برقرار کرده و پس از موفقیت، توکن را ذخیره و کاربر را به /dashboard هدایت کند.
6. در app/dashboard/page.tsx، طرح کلی صفحه داشبورد را ایجاد کنید که شامل کامپوننت‌های FileUpload, SearchForm, DataTable, FileManager باشد. از میدلورهای Next.js یا منطق سمت کلاینت برای محافظت از این صفحه در برابر دسترسی کاربران احراز هویت نشده استفاده کنید (کاربر اگر لاگین نکرده بود به /login ریدایرکت شود).
7. کامپوننت components/FileUpload.tsx را پیاده‌سازی کنید. این کامپوننت باید یک فرم برای انتخاب فایل اکسل داشته باشد و فایل را با درخواست POST به /api/upload ارسال کند. وضعیت آپلود (شروع، در حال انجام، تکمیل شده، خطا) باید به کاربر نمایش داده شود.
8. کامپوننت components/SearchForm.tsx را پیاده‌سازی کنید. این کامپوننت باید یک فیلد ورودی برای tel_num و یک دکمه جستجو داشته باشد. با کلیک بر دکمه، درخواست GET به /api/search ارسال شود و نتایج دریافت شده در state ذخیره شوند.
9. کامپوننت components/DataTable.tsx را پیاده‌سازی کنید. این کامپوننت باید نتایج جستجو (که از کامپوننت والد دریافت می‌کند) را در قالب یک جدول نمایش دهد. ستون‌های جدول باید مطابق با فیلدهای جدول phone_data باشند.
10. کامپوننت components/FileManager.tsx را پیاده‌سازی کنید. این کامپوننت باید لیست فایل‌های آپلود شده را با درخواست GET از /api/files نمایش دهد و دکمه‌ای برای حذف هر فایل با درخواست DELETE به /api/files/:id داشته باشد.
11. استایل‌دهی اولیه با Tailwind CSS.

**مرحله ۴: تکمیل و تست**

1. بررسی و رفع خطاها در هر دو بخش بک‌اند و فرانت‌اند.
2. تست فرآیند کامل: ورود، آپلود فایل اکسل (با چند رکورد و سپس با حجم بیشتر)، مشاهده لیست فایل‌ها، جستجوی شماره تلفن‌ها، و حذف فایل.
3. اطمینان از عملکرد صحیح ایندکس‌گذاری و Batch Insert برای حجم بالا.

**ملاحظات اضافی برای Cursor:**

- لطفاً از نام ستون‌های دیتابیس که در بخش ۵ مشخص شده‌اند استفاده کنید
- تمرکز اصلی بر پیاده‌سازی قابلیت‌های Core (Auth, Upload, Search) و اطمینان از عملکرد جستجو در حجم بالا است.
- برای احراز هویت، یک کاربر پیش‌فرض را در دیتابیس ایجاد کنید (مثلاً username: admin, password: 123 البته هش شده).